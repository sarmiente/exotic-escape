---
import { Icon } from "astro-icon/components";
import { t } from "i18next";
---

<form id="" class="mt-12">
  <div class="relative flex items-center rounded-full border border-primary/20 bg-white p-1 px-2 shadow-md focus-within:ring-2 dark:border-white/10 dark:bg-dark dark:text-white md:p-2 lg:pr-3">
    <!-- Icono de Email -->
    <div class="py-3 pl-4 lg:pl-5">
      <Icon name="envelop" class="text-rich-black" />
    </div>

    <!-- Input de Email -->
    <input
    id="emailInput" 
      required
      name="email"
      aria-label="your email"
      autocomplete="email"
      placeholder={t("nav.mail")}
      class="w-full font-body rounded-full bg-transparent p-4 text-black placeholder-gray-600 outline-none dark:placeholder-white"
      type="email"
    />

    <!-- Botón de Enviar -->
    <button
      id="submitButton"
      type="button"
      title="Obtener Información"
      class="relative ml-auto h-12 w-14 rounded-full before:absolute before:inset-0 before:rounded-full before:bg-oxford-blue before:transition before:duration-300 active:duration-75 active:before:scale-95 dark:before:bg-primaryLight sm:w-auto sm:px-6 hover:scale-105"
    >
      <div class="relative flex items-center justify-center gap-2">
        <!-- Texto visible solo en pantallas md+ -->
        <span class="hidden font-hero text-white dark:text-gray-900 md:flex">
          {t("nav.btn")}
        </span>

        <!-- Icono visible solo en pantallas pequeñas -->
        <Icon class="flex md:hidden" name="arrow" />
      </div>
    </button>
  </div>
  <!-- Mensaje de éxito/error -->
  <p id="responseMessage"></p>
</form>

<script> 
  
  const emailInput = document.getElementById("emailInput") as HTMLInputElement;
  const submitButton = document.getElementById("submitButton");
  const responseMessage = document.getElementById("responseMessage")!;

  submitButton?.addEventListener("click", async () => {
    // Limpiar mensajes anteriores
    
    responseMessage.textContent = "";
    responseMessage.className = "";

    // Validar el campo de email
    const emailValue = emailInput.value.trim();
    if (!emailValue || !validateEmail(emailValue)) {
      responseMessage.textContent = "Please enter a valid email address.";
      responseMessage.className = "text-center text-red-500";
      return;
    }

    try {
      // Mostrar un mensaje de carga mientras se procesa
      responseMessage.textContent = "Sending email...";
      responseMessage.className = "text-center";

      // Enviar la solicitud al backend
      const res = await fetch("/api/resendEmail.json", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          from: "info@sarpin.agency", // Correo autorizado en Resend
          to: "info@sarpin.agency", // Tu correo corporativo
          subject: "New email from the form",
          html: `<p>You have received a new email: <strong>${emailValue}</strong></p>`,
          text: `You have received a new email: ${emailValue}`,
        }),
      });

      // Manejar la respuesta
      const data = await res.json();
      if (res.ok) {
        responseMessage.textContent = `¡Email sent successfully! We will send our portfolio to your email: ${emailValue}`;
        responseMessage.className = "text-white";
        emailInput.value = ""; // Limpiar el campo
      } else {
        throw new Error(data.message || "Unknown error.");
      }
    } catch (error) {
      // @ts-ignore
      responseMessage.textContent = `There was an error sending the email. ${error.message}`;
      responseMessage.className = "text-red-500";
      console.error("Error sending email:", error);
    }
  });

  // Función para validar correos electrónicos
  function validateEmail(email: string) {
    const emailRegex =
      /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    return emailRegex.test(email);
  }
</script>
